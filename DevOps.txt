1. DevOps for Freshers
	1.0. Overview	
		- Envr:
			+ Development
			+ Staging
			+ UAT
			+ Sandbox
			
			+ Production
			
		- DevOps:
			+ Tại sao dùng công cụ/công nghệ này: cty có ai biết tools ngoài tôi k? có khả năng training đc cho ng khác về tools đó k? chứ ko phải vì nó xịn mà tôi dùng
			+ 
			
		- Laptop: 16GB Ram, 80GB HDD
		
		- Contents:
			+ 1. Linux			
			+ 2. Git			
			+ 3. CI/CD: 		tối ưu quy trình làm việc, gia tăng giá trị sp, tiết kiệm  trực tiếp tài nguyên cty -> 1 click là triển khai dự án
			+ 4. Docker:		docker hóa dự án / docker file	
			+ 5. Jenkins:		tools for CI/CD	
			+ 6. Monitoring:	tự động cảnh báo khi có lỗi
			
	1.1. Linux
		+ Ưu điểm:
			- tối ưu hs, tiết kiệm chi phí:		phù hợp hầu hết phần cứng của máy tính cá nhân & server, no GUI nên hiệu suất tốt hơn win, 
			- ổn định, bảo mật:					vòng đời os lâu, open source, qly truy cập mạnh & ngăn chặn truy cập trái phép
			- knang kiểm soát và linh hoạt: 	open source -> tùy chỉnh mọi thứ & toàn quyền, nhiều loại os -> lựa chọn phù hợp
			- pt & cập nhật:					cộng đồng pt lớn, cập nhật thường xuyên
			- tương thích đa nền tảng:			triển khai đc nhiều loại dự án với nguồn tài nguyên hợp lý
			- cộng đồng phát triển lớn:			cộng đồng chuyên tech
			
		+ Install Ubuntu server:
			- VMWare Network:
				+ Bridge:		các thiết bị khác sử dụng chung mạng sẽ truy cập trực tiếp đc đến web trên máy ảo (điện thoại, laptop khác, ... ~ mạng LAN nội bộ: 192.168.0/1.x) 	-> nên dùng với PC
				+ NAT:			chỉ truy cập đến web trên máy ảo từ thiết bị khởi tạo																								-> nên dùng với laptop
				
			- IP máy ảo: DHCPv4 ~ 192.168.1.1/24
				+ Nên set IP tĩnh, để khi tắt máy ảo và bật lại thì IP ko thay đổi
				+ sudo -i -> 
				+ nano /etc/netplan/xx_installer-config.yaml -> 
					- edit: 	dhcpv4: 		false
					- add: 		addresses: 	[192.168.1.110/24]
								gateway4:	192.168.1.1				~ Gateway IP của NAT -> VMWare settings
								nameservers:
								  addresses: [8.8.8.8,8.8.4.4]
				+ netplan apply
				+ ip add		-> check ip
				
				+ Virtual Box: 
					- NAT:			10.0.2.0/24
						+ enp0s3
						+ dhcpv4: 	10.0.2.15/24
					- Host only:	192.168.56.1/24
						+ enp0s8
						+ 
					- Bridge:
						+ 
						+ 
			
			- 
		
		+ Folders tree:
			- /: (root) contains subfolders below
				+ bin / boot / dev / etc / lib / media / mnt / opt / sbin / srv / 
				+ root: 
				+ home:	ngocnm / quanvd / ...
				+ usr:	bin / include / lib / sbin
				+ var:	cache / log / tmp / spool
				+ ...
		
		+ Commands:
			- Crt + C: exit
			
			- pwd: 		đang ở folder nào
			- whoami:	đăng nhập với user nào
			- cd folder / cd .. / cd ...
			- ls / ls folder / ls folder +  tab / ls -l / ls -a (show hidden) / ls -t (sort by time)
			- mkdir folder / mkdir -p folder/subfolder/subsub
			- touch filePath: tạo file
			- cat filePath: xem nội dung file
			- rm filePath / rm -r folder / rm -rf file/folder
			- cp -r folderPath destPath / cp filePath destPath
			- mv folder/file destPath
			- echo content / echo content > filePath: in nội dung - ghi đè / echo content >> filePath: append
			- history / clear / exit
			- tail -n [num] filePath > newFilePath: xem nội dung n dòng của file / tail -f filePath: xem content file real time
			
			- sudo: + command = chạy command với quyền root nên cần pass
				- sudo - i: sau lệnh này chạy tất cả command với quyền root
				
			- apt install/remove package -y: cài package ko cần xác nhận yes
			
			- Ram/Cpu usage:
				+ free -m	: ram usage
				+ df -h / 	: cpu usage
				+ top:		task manager
				
			- Server:
				+ sudo hostnamectl set-hostname newName
				+ sudo reboot
				
			- Netstat: netstat -tlpun
				+ -t: show tcp connection port
				+ -l: show port open & listen to accept connection
				+ -p: show process/program of connection
				+ -u: show udp connection
				+ -n: show ip & port dang so instead domain
			
			- Process: pf -ef
				+ ps -ef| grep shoeshop				(ps -ef: output của câu trước là input của câu sau;		grep xxx: tìm kiếm)
			
			- Internet:
				+ ping 8.8.8.8: 				= ping google.com
				+ telnet IP port:				check connect to other server
				+ traceroute -T -p port IP: 	check port open or not (-T = tcp connection, -p = port)
		
		+ Vim editor:
			- vi filePath: mở file để edit, chưa có file thì tự tạo file mới
			- I: insert
				+ esc:	Command mode
				+ :x: 	exit & save
				+ :q!:	exit & not save
			- Command mode:
				+ dd: delete line
				+ U: = ctr + Z
				+ yy: copy line
				+ p: paste
				+ / + key: search
			
		
		+ Quyền truy cập: cần quyền root trước
			- User: 
				+ root user: 	superuser, rw all file, manage account, group, owner ~ sudo command
				+ system user:	created by the operating system during installation for running system processes and services -> used to run non-interactive or background processes
				+ regular user:	standard users, only rw files in home/user, can’t access other users’ files or system files without appropriate permissions.
				
				+ useradd:	add user only
				+ adduser: 	add user kèm create passwd, home/user folder, user info ... --> tạo xong ssh đc luôn
				+ su user:	switch user
				+ deluser user:		xóa user
				+ vi /etc/passwd:	xem thông tin user
				
			- Group: khi tạo 1 user mới thì tự động tạo 1 group mới cùng tên với user và add user vào group đó
				+ groupadd/delgroup=groupdell groupName:			
				+ usermod -aG groupName userName:		(-a = append, -G= liệt kê ds group của user, nếu bỏ -G thì xóa user khỏi các group đã add trước đó)
				+ groups userName:						kiểm tra list group của user
				+ deluser userName groupName:			xóa user khỏi group
				+ getent group/passwd/userName:			list group/passwd/userName
				
			- passwd: userName : passwd : userId : groupId : comment/description/userInfo : homeDirectory : shell
				
			- Owner permission: chown
				+ chủ sở hữu:		u
				+ nhóm sở hữu:		g
				+ nhóm user khác: 	o
				
				+ ls -l:	xem full folder/file infor:  
				+ chown -R owner:groupOwner folder/file		(-R: thay đổi folder cha thì thay đổi luôn file/folder con, nếu ko thì chỉ thay đổi folder cha)
				
			- Access permission: chmode, (quyền tối thiểu để tác động đc vào 1 file là quyền execute (x). ví dụ có quyền r nhưng ko x thì ko mở đc file)
				+ read:		4	r
				+ write:	2	w	
				+ execute:	1	x
				+ full:		7			(7=4+2+1, 6=4+2, 5=4+1, 3=2+1, 1, 0=no permissions)
				
				+ formart: drwx.../-rwx: d=directory, -=file
					* drwxr-xr-x   2 root root       4096 Oct  7 17:08 srv
					* lrwxrwxrwx   1 root root          7 Oct  7 08:35 bin -> usr/bin
					* -rw-------   1 root root 4105175040 Jan  3 05:39 swap.img
					
				+ chmod -R u=rwx,g=rx,o=- folder/filename
				+ chmod -R 777 folder/filename:	change mode for open to all user	(chmode ugo filename)
				
		+ Tư duy triển khai dự án:
			+ Project:
				- Project type: Frontend | Backend
				- Tool deploy project | version of tool: version tương thích với yêu cầu của project
				- Files:
					+ File chức năng:	file code										-> not
					+ File cấu hình:	config, port, connection, connect database		-> DevOps takecare
					+ File khác:														-> not
				
				- Deploy: 2 steps
					+ 1. Build: command build file/folder
					+ 2. Run:	run file/folder
					
			+ DevOps: 4 steps
				- 1. Công cụ j?
				- 2. File cấu hình ở đâu?
				- 3. Làm sao build?
				- 4. Run thế nào?
				
				- Note:
					+ mỗi project có 1 thư mục làm việc riêng
					+ mỗi project có user riêng
					--> ko dùng user root để deploy dự án, nếu bị chiếm quyền thì ảnh hưởng toàn bộ hệ thống 
					--> giải pháp: tạo riêng user cho mỗi thư mục riêng của dự án, và user đó chỉ có quyền trong thư mục riêng đó thôi và chỉ chạy bởi user đó
					
			+ Deploy Frontend: Vue/React: 4 steps - todolist/vision
				// 0: user root
				+ copy dự án lên server: scp projectFile serverAddr = scp E:/DevOps/todolist.zip ngocnm@192.168.56.101:/home/todolist
				+ giải nén: unzip todolist.zip /projects
				+ tạo user riêng cho project: adduser todolist
				+ set owner & mode cho folder /projects/todolist/: 
					- chown -R todolist:todolist /projects/todolist/
					- chmod -R 750 /projects/todolist/
				// 1. 
				+ install packages: 		sudo apt install nodejs npm		(user root)
				+ install dependencies:		npm install						(user todolist)
				// 2
				+ Configs:
					- package.json:
						+ "scripts": 
							- "serve":	
							- "build": ~ build project ~ npm run build "params=vue-cli-service build"
					- vue.config.js: export port ~ 3000, ...
				// 3
				+ build: 					npm run build 		--> build ra folder /dist/		(user todolist)
				// 4
				+ run:	3 ways for run frontend project
					- way1: 	web server					nginx
					- way2: 	service					
					- way3: 	pm2 ??						
					
					- local:	npm run serve				(serve in scripts config)
			
			+ Nginx: 		(user root) - sau khi build project xong -> step 4: run project by webserver
				- install: apt install nginx -> default port 80: 
				- configs: /etc/nginx: subfolders [sites-available, conf.d]
					+ 1. sites-available/default: set port 8080 --> test syntax: nginx -t  --> apply new config: systemctl restart nginx / nginx -s reload (systemctl restart nginx: restart all nginx cho all project - ko nên dùng)
					+ 2. add file config for each project to subfolder /conf.d: /etc/nginx/conf.d/todolist.conf
						server {
							listen 		8081; // port
							root 		/projects/todolist/dist/; // build folder
							index 		index.html;
							try_files	$uri $uri/ /index.html;
						}
		
					+ 3. add group owner cho user nginx: default user nginx is www-data, ko có quyền chạy todolist, todolist is run with groupOwner todolist nên ko chạy đc -> error 500
						- usermod -aG todolist nginx
				
				- work folder: /usr/share/nginx/html/
						
			+ Service: 		(user root) - run by service, tương tự như system service - systemctl
				- location:	/lib/systemd/system/
				- tao file config service: vi /lib/systemd/system/vision.service
					[Service]
					Type=simple
					User=vision
					Restart=on-failure							// khi service bi die thi tu restart lai
					WorkingDirectory=/projects/vision/
					ExecStart=npm run start -- --port=3000
					
				- run: systemctl daemon-reload 		--> 	systemctl restart vision (.service) 	--> 	systemctl status vision
				
			// 192.168.56.104/24			10.0.2.15/24
			
			+ Deploy Backend: Java spring boot 
				- install java, maven:	 	apt install openjdk-17-jdk openjdk-17-jre maven -y				(user root)
				- install database:			apt install mariadb-server -y									(user root)
					+ config: 				systemctl stop mariadb 									--> 	/etc/mysql/mariadb.conf.d/xx_server.cnf:	bind-address = 0.0.0.0 ~ access from any where		--> 	systemctl restart mariadb
					+ Create db:			mysql -u root --> mysql command:
						- show databases;
						- create database dbName;													
						- create user 'userName'@'%' identified by 'passw';							--> ('%' = scope, có thể truy cập đến tất cả các server)  mỗi db nên có 1 user riêng để truy cập đến, ko dùng user root
						- grant all privileges on dbName.* to 'userName'@'%'						--> gán quyền cho user để tác động lên db
						- flush privileges;															--> save db setting
						- exit
						
					+ Connect db:	(user root)		mysql -h (host) 192.168.56.10 (IP server) -P (port) 3306 -u userName -p (passwd)		--> mysql command
						- use dbName;																--> use shoeshop;
						- show tables;
						- source pathOfDbFile;														--> source /projects/shoeshop/shoe_shopdb.sql;		--> show tables;			// import database from db file
						
				- Config: 	(user root)
					+ link to database: edit src/main/resource/application.properties					--> 
						- spring.datasource.url=jdbc:mysql://<address_server>:<port>/<database_name>
						- spring.datasource.username=<username>
						- spring.datasource.password=<password>
						- server.port=8090
						
				- build:	(user shoeshop)			mvn install -DskipTest=true						(-DskipTest: bỏ qua maven auto test)				--> build ra 'target' folder
					
				- run:		(user shoeshop)			nohub java -jar target/pathOfJarFile 2>&1 &		(nohub: auto save log to nohub.out file, 		2>&1 &: chạy background -> kill process: kill -9 pId, -9=buộc dừng)
				
				- ps -ef| grep shoeshop				(ps -ef: output của câu trước là input của câu sau;		grep xxx: tìm kiếm)

	1.2. Git
		+ Architect
			- 	 							Local												Remote (server)
					Working directory		Staging area			Local repo					  Remote repo / registry
						Edit file 	------>		git add	   ------>   git commit -------> git push ----->	
																		<-------------- git pull/fetch
							<--------------------------------------- git checkout
							<--------------------------------------- git mergre
							
			- Commit covention:
				<type>[optional scope]: <description>		// scope: project, module, lib, feature
				[optional body]								// details, keywords	
				[optional footer] / BREAKING CHANGE			// issue, ID, ...
				
				+ feat: 	thêm một feature
				+ fix: 		fix bug cho hệ thống, vá lỗi trong codebase
				+ refactor: sửa code nhưng không fix bug cũng không thêm feature hoặc đôi khi bug cũng được fix từ việc refactor.
				+ docs: 	thêm/thay đổi document
				+ chore: 	những sửa đổi nhỏ nhặt không liên quan tới code
				+ style: 	những thay đổi không làm thay đổi ý nghĩa của code như thay đổi css/ui chẳng hạn.
				+ perf: 	code cải tiến về mặt hiệu năng xử lý
				+ vendor: 	cập nhật version cho các dependencies, packages.
				+ ci: 		Thay đổi liên quan đến cấu hình CI
				+ build, test, ...
				+ Optimize, Bump, Drop, ...
				
				+ BREAKING CHANGE: Nhưng commit mới footer là BREAKING CHANGE thể hiện những thay đổi gây ảnh hướng lớn đến source code ví dụ thay đổi kiểu dữ liệu, cách lấy dữ liệu… => Qua đó cảnh báo mọi người để tránh phát sinh các vấn đề.
				
				+ generate CHANGELOGS cho dự án, team sẽ sử dụng 1 plugin của fastlane có tên là Secmantic_release
		
		+ Git workflow: manage & deploy for envinroment: development - staging - production
			- main branches						tag:release						tag:release						tag:release				// production
			
					+ hotfix		*
					
					+ release									*									*									// staging
					
					+ develop	*	*		*		*		*		*		*		*		*											// development
						- feature 1			x
						- feature 2					x
						- ....
						
			- Steps:
				+ 1. create project/branch: create project & main branche  -> branch out: develop / release / hotfix
				+ 2. development:			develop branch  ->  create feature branches  ->  dev code  -> merge: feature -> develop
				+ 3. release:				merge code from develop branch to release branch ->  test 
												- test pass: merge code release -> main: add Tag -> deploy = production
												- test fail: merge code release -> develop -> feature: fixed issue -> merge code: feature -> develop -> release -> retest -> ...
				+ 4. hot fix:				merge code from main to hotfix (at commit of release:tag) -> fixed:
												- merge code from hotfix to main: 		version up & continous release on main branch
												- merge code from hotfix to develop:	-> branch out feature: develop -> release -> ...
			
			
				+ Git in Samsung = gerrit: all dev alway push code to main branch: all code alway on main branch
					- dev -> push main branch from local repo: review +1/+2 & submit(=merge code) -> self test ok: version up main branch(= release) -> tester test: ...
						+ got issue: fix in local repo -> push main branch: review & merge -> cherrypick to production branch -> version up: main & production -> tester test again.
					-
			
			- Gitflow:
				+ VCS: version control system
					- Centralized Version Control:	SVN
					- Distributed Version Control: 	Git
				+ 4 Gitflow:
					- Centralized: Đây là workflow cơ bản nhất, với 1 branch duy nhất, mọi người trong team đều làm việc chung trên này.
						+ Nó giống hệt với SVN nói riêng và các centralize version control khác. Vậy nên nó không tận dụng được hết những tính năng cũng như ưu điểm của git. 
						+ Flow này áp dụng cho những team mới áp dụng git, những dự án nhỏ, có vòng đời phát triển ngắn. 
						+ Hoặc flow này có thể áp dụng như giai đoạn trung gian của việc chuyển dự án từ SVN sang Git.
					
					- Feature branch workflow: only main branch & feature branches: merge feature branches to main branch -> conflic: tự handle
						+ pull request: leader & team review code trc khi merge vào main branch.
						+ ứng dụng được nhiều điểm mạnh của git, thích hợp cho những dự án phát triển với team nhỏ và vừa. 
						+ Nhưng với những dự án lớn hơn, những team lớn hơn, hay đơn giản là khi cần thiết phải chia role cho các branch, chứ không đơn thuần là chỉ có branch master và các feature branch.  ->  Gitflow Workflow
						
					- Gitflow Workflow: main, develop, feature, release, hotfix
					
					- Forking workflow: Tách ra để đi nhanh hơn, hợp lại để đi xa hơn -> Fork repo trên github
						+ mỗi ng 1 repos khác nhau, fork từ repos base, tự  phát triển khác nhau, sau muốn merge lại thì tạo pull request
			
		+ Gitlab:
			- Install: search gitlab-ee package ubuntu install
			- Define domain for gitlab:	
				+ nano /etc/host:							add line - 192.168.56.30 gitlab.devops.tech			-> saved
				+ nano /etc/gitlab/gitlab.rb:				exteral_url 'http://gitlab.devops.tech'				-> login gitlab admin by this domain
				+ edit host of Windows:						“C:\Windows\System32\drivers\etc\hosts”				-> add line: 192.168.56.30 gitlab.devops.tech		-> replace				// Linux: /etc/host
				+ cat /etc/gitlab/initial_root_password 	default usser/password
				
				+ Để các server khác truy cập được vào domain gitlab thì cần add host domain cho tất cả các server đó
				
				+ Convert domain:port về defalut domain:
					- 
		
			- Mỗi project nên tạo 1 group trên gitlab để chứa các service của project: service frontend, service backend (micro service)
			
			- Tag: mỗi branch có thể tạo tag, là điểm đánh dấu và là dấu hiệu để làm CI/CD
			
			- add SSH key for Gitlab:
				+ gen SSH key for local
				+ add SSH key on Gitlab server for each account
				
			- Merge request:	fast-forward / non fast-forward
				+ mỗi developer đều đc approve merge request, chỉ maintainer mới có approve + merge
				+ trước khi merge: rebase or squash commit: -> gộp nhiều commit nhỏ lại với nhau để ít commit trong history
				+ merge fast-forward:  git merge login 					/ merge non fast-forward: git merge login --no-ff
				+ ordered: feature merge to dev		dev merge to release		release merge to main 
				
			- Cherrypick: tạo 1 merge request mới với branch cherrypick mới
			
			- Project config:
				+ Project Infomation: 
					- Activity:		Event: push, merge, Issue, Comment, ...
					- Labels:		label applied to issue/merge request: bug, critical, discussion, ...
					- Members:		manage list members
				
				+ Repository: manage
					- Files / Commits / Branches / Tags
					- Tags: mỗi branch có thể tạo tag, là điểm đánh dấu release và là dấu hiệu để làm CI/CD
					
				+ Issues:
					- Milestones: tổng quan của 1 bản release [issue, merge request], status: upcoming, complete
					
				+ Merge requests:
					- khi merge một nhánh vào thì tất cả commit của nhánh đấy cộng với một commit mới (gọi là meta merge commit) sẽ được thêm vào nhánh chỉ định
					- git merge --squash --edit: dồn tất cả commits của feature branch thành 1 commit duy nhất trước khi merge	(~ git rebase -i ... ), và hỏi người dùng tên commit mới là gì rồi sẽ merge vào branch, muốn edit commit message thì thêm '--edit'
				+ CI/CD:
					- Pipelines / Editor:
					- Jobs / Schedules
					
					- Pipelines: là component lớn nhất của quy trình tích hợp được chạy dài từ đầu tới cuối, phân phối và triển khai liên tục (Pipelines are the top-level component of continuous integration, delivery, and deployment)
						+ Types:
							- Jobs : Các công việc được giao thực thi (Ví dụ: biên dịch mã hoặc chạy test)
							- Stage : Xác định các thời điểm và cách thực hiện. (Ví dụ: test chỉ chạy sau khi biên dịch thành công)
						+ Nguyên tắc hoạt động:								https://tigosoftware.com/vi/duong-ong-tich-hop-cicd-pipeline-la-gi
							- Tất cả các công việc trong cùng một stage được Runner thực hiện song song, nếu có đủ số lượng Runner đồng thời.
							- Nếu Success, pipeline chuyển sang stage tiếp theo.
							- Nếu Failed, pipeline sẽ dừng lại. Có một ngoại lệ là nếu job được đánh dấu làm thủ công, thì dù bị fail thì pipeline vẫn tiếp tục.
							
					- Một Runner có thể là một máy ảo (VM), một VPS, một bare-metal, một docker container hay thậm chí là một cluster container. 
					- Gitlab và Runners giao tiếp với nhau thông qua API, vì vậy yêu cầu duy nhất là máy chạy Runner có quyền truy cập Gitlab server.
					- các Runner thực thi các jobs được định nghĩa trong file .gitlab-ci.yml.
					- Một Runner có thể xác định cụ thể cho một dự án nhất định hoặc phục vụ cho nhiều dự án trong Gitlab. Nếu nó phục vụ cho tất cả project thì được gọi là Shared Runner.
				+ Security and Compliance
				+ Deployments
				+ Packages and registries
				+ Infrastructure: 			Kubernetes clusters / Terraform
				+ Monitor:					Metrics / Error Tracking / Alerts / Incidents
				
				+ Settings:
					- Repository: 			protected branches [Roles: Maintainer / Developer + Maintainer / No one]				// no Observer
					- Merge request:		merge commit / Merge commit with semi-linear history (conflict -> rebase) / Fast-forward merge ((conflict -> rebase)
					- 	
				
	1.3. CI/CD:	gitlab / jenkins		-	commit -> build -> test -> deploy	(automactic - not manual, avoid mistake)
		+ CI: Continuous Integration																							// clone code -> build -> test: pef, security, clean code, ...
		+ CD: Continuous Deployment(Auto - increase pef, decrease time) / Continuous Delivery(Manual - increase control)		// deploy
		
		+ normal process: dev: code -> tester: test -> devops deployment, monitoring, setup system, maintain & upgrade system
		
		+ Gitlab: 
			- Một Runner có thể là một máy ảo (VM), một VPS, một bare-metal, một docker container hay thậm chí là một cluster container. 
			- Gitlab và Runners giao tiếp với nhau thông qua API, vì vậy yêu cầu duy nhất là máy chạy Runner có quyền truy cập Gitlab server.
			- Các Runner thực thi các jobs được định nghĩa trong file .gitlab-ci.yml.
			- Một Runner có thể xác định cụ thể cho một dự án nhất định hoặc phục vụ cho nhiều dự án trong Gitlab. Nếu nó phục vụ cho tất cả project thì được gọi là Shared Runner.
			
			
			- Thực hành (Best Practices): Dưới đây là các bước thông thường của quá trình release tính năng trong một dự án thuộc hệ thống Teamcrop.
				Bước 1: 	[Manual] 	Khởi tạo repository và có branch default là master và dev. Cài đặt trên Gitlab 9.
				Bước 2: 	[Manual] 	Trừ owner ra, thì các coder sẽ push code tính năng lên branch dev
				Bước 3: 	[Auto] 		Hệ thống tự động thực hiện test source code, nếu PASS thì sẽ deploy tự động (rsync) code lên server beta.
				Bước 4: 	[Manual] 	Tester/QA sẽ vào hệ thống beta để làm UAT (User Acceptance Testing) và confirm là mọi thứ OK.
				Bước 5: 	[Manual] 	Coder hoặc owner sẽ vào tạo Merge Request, và merge từ branch dev sang branch master.
				Bước 6: 	[Manual] 	Owner sẽ accept merge request.
				Bước 7: 	[Auto] 		Hệ thống sẽ tự động thực hiện test source code, nếu PASS sẽ enable tính năng cho phép deploy lên production server.
				Bước 8: 	[Manual] 	Owner review là merge request OK, test OK. Tiến hành nhấn nút để deploy các thay đổi lên môi trường production.
				Bước 9: 	[Manual] 	Tester/QA sẽ vào hệ thống production để làm UAT và confirm mọi thứ OK. Nếu không OK, Owner có thể nhấn nút Deploy phiên bản master trước đó để rollback hệ thống về trạng thái stable trước đó.
				Bước 10: 	[Manual] 	Chờ biên bản nghiệm thu cho giai đoạn triển khai mới, hãy kiên trì lắng nghe khách hàng và chủ động "phòng thủ" từ xa (preventive actions).
			- 
	
	1.4. Docker
		+ Docker là công cụ ảo hóa dạng container, giúp đóng gói project + dependencies( = docker image) vào 1 container duy nhất để có thể chạy / deploy trên nhiều môi trường, thiết bị khác nhau 1 cách linh hoạt, ko phụ thuộc vào nền tảng.
		+ Docker architect:		code			dockerfile				docker image				docker hub						Devices
			- 					(dev)			  (write)	-> build ->	(container)		-> push ->	(repo - remote)-> pull image ->	run in container
		
		+ Install docker:						https://devopsedu.vn/courses/devops-for-freshers/lesson/bai-19-cach-su-dung-docker/
			- mkdir tools/docker		-> 		touch tools/docker/install-docker.sh
			- Run:	/.install-docker.sh / sh install-docker.sh / bash install-docker.sh
			
		+ Pull & run docker image from docker hub: https://hub.docker.com/
			- docker pull ubuntu:2204								-> pull imageName:tag, nếu ko có tag = latest
			- docker images											-> check images: show Repo/Tag/ImageId/Created/Size
			- docker run --name containerName -it imageName:tag		-> vào bash of container (chỉ run 1 lần đầu tiên)				(exit: stop container)		(tự pull từ docker hub về nếu local chưa pull)
			- docker ps 											-> show containsers are running (-a: show containsers exits)	ContainerId/Image/Command/Status/Ports/Names
			- docker start containerName/containerId				-> start lại container
			- docker stop containerName/containerId
			- docker exec -it containerName command(bash)			-> truy cập lại envir container sau khi run & exit
			- docker run --name nginx -dp 9999:80 -it nginx			-> pull & run nginx (-d: run in background, -p: port, 9999: port run outside, 80: port of container - listen in container)
			
			- docker stop/rm $(docker ps -a -q)						-> stop/rm all containers (docker ps -a -q = containerId)		docker rm -f containerName/containerId
			- docker rmi imageName:tag								-> xóa image
			
			- docker build -t imageName:tag	-f fileName				-> build project to docker image
			
			- docker logs -f containerName							-> xem log
			- docker exec -it containerName sh						-> vao container envr
			
			- docker hub:
				+ docker login 										-> docker logout
				+ docker pull imageName:tag
				+ docker tag imageName:tag imageFormat				-> imageFormat: domain/project/repo:tag
				+ docker push domain/project/repo:tag
		
		+ Write docker file: dockerize project	-> config để đưa src code vào container & install các tools để chạy project
			- Commands:
				FROM imageName(node:20)			-> pull image from docker hub
				WORKDIR /app					-> chỉ định thư mục làm việc (chưa có app thì tạo /app)
				COPY . .						-> copy src code tại vị trí dockerfile đang đứng vào container: WORKDIR = /app
				RUN command						-> command: build / run
				
				ENV 							-> khai bao bien moi truong						ENV JAVA_OPTIONS="-Xmx2048m -Xms256m"
				EXPOSE port						-> define port: port server : port container
				CMD ["command", "params", ...]	-> xác định lệnh và giá trị mặc định
				ENTRYPOINT command 				-> giữ nguyên lệnh cố định và cho phép lệnh đc chỉ định khi container chạy thêm vào cuối của nó
				
				USER userName
			
			- Tip security / optimize:
				+ non root user:				-> for security
				+ chọn base image phù hợp:		->
					- đúng version /Java 8 		-> nên cài maven java 8 để build & run: tối ưu dung lượng docker image build ra & hạn chế tools ko cần thiết làm tăng size
					- ubuntu/cenos				-> nên chọn image đc build sẵn dựa trên alpine vì nhẹ và tối ưu
					- base image uy tín			-> nên chọn : offical / verified / sponsored
					- tool quét image			-> check lỗ hổng
				+ use Multiple stage: 			-> giảm size docker image cuối cùng đc build ra
				
		+ Dockerize project: backend
			- create docker file:		../project/Dockerfile		../project/Dockerfile_xxx + config: 
				+ ## build state
					FROM maven:3.5.3-jdk-8-alpine as build						# tạo input build cho run state
					WORKDIR /app
					COPY . .
					RUN mvn install -DskipTest=true								# build folder: /app/target
					
				+ ## run state
					# using existing alpine from docker hub
					FROM amazoncorretto:8u402-alpine-jre
					
					# config user for run
					RUN adduser -D shoeshop										# create user
					
					# tự build alpine
					FROM alpine:3.19											# using original alpine
					
					RUN adduser -D shoeshop
					RUN apk add openjdk8										# install java 8 for alpine
					
					WORKDIR /run/shoeshop
					COPY --from=build /app/target/shoe-ShoppingCart-0.0.1-SNAPSHOT.jar /run/shoeshop/shoe-ShoppingCart-0.0.1-SNAPSHOT.jar
					
					# config user for run
					RUN chown -R shoeshop:shoeshop /run/shoeshop
					USER shoeshop
					
					EXPOSE 8080													# container port
					ENTRYPOINT java -jar /run/shoeshop/shoe-ShoppingCart-0.0.1-SNAPSHOT.jar
					
			- docker build -t imageName:tag	-f fileName
			- docker run --name containerName -dp 9999:80 -it imageName:tag
			- push imageName to docker hub / registry
			
			* Note: size of image chỉ phụ thuộc step run, ko phục thuộc step build
		
		+ Dockerize project: frontend
			- 
			
		+ Example: https://elroydevops.tech/mau-dockerfile-cac-du-an/
		
		+ Docker registry:
			- dockerhub: ko dùng trong enterprise envr
			- private registry: use https, auto verified		- ko dùng trong enterprise envr
			- harbor: cần mua domain (50k), thuê vps giá rẻ		- 	
			
	1.5. Jenkins
	
	1.6. Monitoring
	

// dev-server:
ngocnm@192.168.56.10

// git-server:
ngocnm@192.168.56.20

// database
ngocnm@192.168.56.30
